import pytest
from unittest.mock import Mock

from notiontaskr.domain.name_labels.id_label import IdLabel
from notiontaskr.domain.name_labels.label_registerable import LabelRegisterable
from notiontaskr.domain.value_objects.notion_id import NotionId
from notiontaskr.domain.value_objects.status import Status


# Generated by Copilot
class TestIdLabel:
    """IdLabelクラスのテスト"""

    def from_propertyメソッドに未着手ステータス(self):
        # 準備
        notion_id = NotionId(number="123")
        status = Status.NOT_STARTED

        # 実行
        label = IdLabel.from_property(notion_id, status)

        # 検証
        assert label.key == ""
        assert label.value == "123"

    def from_propertyメソッドに完了ステータス(self):
        # 準備
        notion_id = NotionId(number="123")
        status = Status.COMPLETED

        # 実行
        label = IdLabel.from_property(notion_id, status)

        # 検証
        assert label.key == "✓"
        assert label.value == "123"

    def from_property_keyメソッドに進行中ステータス(self):
        # 準備
        notion_id = NotionId(number="123")
        status = Status.IN_PROGRESS

        # 実行
        label = IdLabel.from_property(notion_id, status)

        # 検証
        assert label.key == "→"
        assert label.value == "123"

    def from_property_keyメソッドに遅延ステータス(self):
        # 準備
        notion_id = NotionId(number="123")
        status = Status.DELAYED

        # 実行
        label = IdLabel.from_property(notion_id, status)

        # 検証
        assert label.key == "!"
        assert label.value == "123"

    def from_property_keyメソッドに中止ステータス(self):
        # 準備
        notion_id = NotionId(number="123")
        status = Status.CANCELED

        # 実行
        label = IdLabel.from_property(notion_id, status)

        # 検証
        assert label.key == "×"
        assert label.value == "123"

    def parse_and_registerメソッドに数字のみのラベル(self):
        # 準備
        key = "1"
        value = "23"
        mock_delegate = Mock(spec=LabelRegisterable)

        # 実行
        IdLabel.parse_and_register(key, value, mock_delegate)

        # 検証
        mock_delegate.register_id_label.assert_called_once()
        registered_label = mock_delegate.register_id_label.call_args[0][0]
        assert registered_label.key == ""
        assert registered_label.value == "123"

    def parse_and_registerメソッドに進行中シンボル(self):
        # 準備
        key = "→"
        value = "123"
        mock_delegate = Mock(spec=LabelRegisterable)

        # 実行
        IdLabel.parse_and_register(key, value, mock_delegate)

        # 検証
        mock_delegate.register_id_label.assert_called_once()
        registered_label = mock_delegate.register_id_label.call_args[0][0]
        assert registered_label.key == "→"
        assert registered_label.value == "123"

    def parse_and_registerメソッドに遅延シンボル(self):
        # 準備
        key = "!"
        value = "123"
        mock_delegate = Mock(spec=LabelRegisterable)

        # 実行
        IdLabel.parse_and_register(key, value, mock_delegate)

        # 検証
        mock_delegate.register_id_label.assert_called_once()
        registered_label = mock_delegate.register_id_label.call_args[0][0]
        assert registered_label.key == "!"
        assert registered_label.value == "123"

    def parse_and_registerメソッドに完了シンボル(self):
        # 準備
        key = "✓"
        value = "123"
        mock_delegate = Mock(spec=LabelRegisterable)

        # 実行
        IdLabel.parse_and_register(key, value, mock_delegate)

        # 検証
        mock_delegate.register_id_label.assert_called_once()
        registered_label = mock_delegate.register_id_label.call_args[0][0]
        assert registered_label.key == "✓"
        assert registered_label.value == "123"

    def parse_and_registerメソッドに中止シンボル(self):
        # 準備
        key = "×"
        value = "123"
        mock_delegate = Mock(spec=LabelRegisterable)

        # 実行
        IdLabel.parse_and_register(key, value, mock_delegate)

        # 検証
        mock_delegate.register_id_label.assert_called_once()
        registered_label = mock_delegate.register_id_label.call_args[0][0]
        assert registered_label.key == "×"
        assert registered_label.value == "123"

    def parse_and_registerメソッドに未知のキー(self):
        # 準備
        key = "?"  # 未知のキー
        value = "123"
        mock_delegate = Mock(spec=LabelRegisterable)

        # 実行 & 検証
        with pytest.raises(ValueError, match="Unknown key: \\?"):
            IdLabel.parse_and_register(key, value, mock_delegate)
