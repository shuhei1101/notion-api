import config as config
import emoji
from datetime import datetime
from datetime import timedelta

def to_isoformat(dt: datetime) -> str:
    '''datetime„ÇíISO8601ÂΩ¢Âºè„Å´Â§âÊèõ„Åô„Çã
    Êó•Êú¨ÊôÇÈñì(JST)„ÇíUTC„Å´Â§âÊèõ„Åó„Å¶„Åã„ÇâISO8601ÂΩ¢Âºè„Å´Â§âÊèõ„Åô„Çã
    ‰æã: 2023-10-01T12:00:00.000Z
    '''
    try:
        dt = dt - timedelta(hours=9)
        # ISOÂΩ¢Âºè„Å´Â§âÊèõ
        return dt.strftime('%Y-%m-%dT%H:%M:%S.') + f"{dt.microsecond // 1000:03d}Z"
    except Exception as e:
        raise ValueError(f'Invalid datetime: {dt}. Error: {e}')
def truncate_decimal(num: float) -> str:
    '''Â∞èÊï∞ÁÇπ‰ª•‰∏ã„Çí1Ê°Å„Å´Âàá„ÇäÊç®„Å¶„Çã
    
    „Åü„Å†„Åó„ÄÅÂ∞èÊï∞ÁÇπ‰ª•‰∏ã„Åå0„ÅÆÂ†¥Âêà„ÅØÊï¥Êï∞ÈÉ®ÂàÜ„ÅÆ„ÅøË°®Á§∫
    '''
    try:
        result_str = f'{num:.1f}'.rstrip('0').rstrip('.')
        return str(result_str)
    except TypeError:
        raise ValueError(f'Invalid input: {num}. Must be a float or int.')

def remove_variant_selectors(text):
    '''ÁµµÊñáÂ≠ó„ÅÆ„Éê„É™„Ç¢„É≥„Éà„Çª„É¨„ÇØ„Çø„ÇíÂâäÈô§„Åô„Çã
    ‰æã: ‚è≤Ô∏è -> ‚è≤
    '''
    return ''.join(c for c in text if not (0xfe00 <= ord(c) <= 0xfe0f))


# Âãï‰ΩúÁ¢∫Ë™çÁî®
if __name__ == '__main__':
    label = 'üå≥0/2'
    print(emoji.demojize(label))
    print(emoji.demojize(remove_variant_selectors(label)))
